daemon off;
user nginx;
worker_processes 1;

error_log /dev/stderr warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  include includes/lua-init.conf;
  default_type application/octet-stream;
  server_names_hash_bucket_size 128;

  # logs
  log_format main  '{ "@timestamp": "$time_iso8601", '
                       '"@fields": { '
                       '"remote_addr": "$remote_addr", '
                       '"remote_user": "$remote_user", '
                       '"body_bytes_sent": "$body_bytes_sent", '
                       '"request_time": "$request_time", '
                       '"status": "$status", '
                       '"request": "$request", '
                       '"request_method": "$request_method", '
                       '"http_referrer": "$http_referer", '
                       '"http_user_agent": "$http_user_agent" } }';

  access_log /dev/stdout main;

  sendfile on;
  server_tokens off;

  # compression
  gzip on;
  gzip_comp_level 5;
  gzip_min_length 1000;
  gzip_proxied any;
  gzip_types application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/plain text/x-component;
  gzip_vary on;

  # request sizes
  client_max_body_size 128M;

  resolver 8.8.8.8 8.8.4.4 valid=300s;
  resolver_timeout 5s;

  # set proxy defaults
  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Host $host;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_http_version 1.1;

  # allow websocket connections
  map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
  }
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection $connection_upgrade;

  # http traffic directly to k8s service
  server {
    listen 8080 default_server;

    # custom timeouts
    client_body_timeout ${CLIENT_BODY_TIMEOUT};
    client_header_timeout ${CLIENT_HEADER_TIMEOUT};
    keepalive_timeout ${KEEPALIVE_TIMEOUT};
    send_timeout ${SEND_TIMEOUT};
    proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
    proxy_send_timeout ${PROXY_SEND_TIMEOUT};
    proxy_read_timeout ${PROXY_READ_TIMEOUT};

    location / {
      proxy_pass http://${OFFLOAD_TO_HOST}:${OFFLOAD_TO_PORT};
    }
  }

  # readiness
  server {
    listen 8081;

    location /readiness {
      keepalive_timeout 0;
      access_log /dev/null;
      error_log /dev/null;

      proxy_pass http://${OFFLOAD_TO_HOST}:${OFFLOAD_TO_PORT}${HEALT_CHECK_PATH};
    }
  }

  # liveness
  server {
    listen 8082;

    location /liveness {
      keepalive_timeout 0;
      access_log /dev/null;
      error_log /dev/null;

      add_header Content-Type text/plain;
      return 200;
    }
  }

  # prometheus
  server {
    listen ${PROMETHEUS_METRICS_PORT};

    location /metrics {
      access_log /dev/null;
      error_log /dev/null;

      content_by_lua 'prometheus:collect()';
    }
  }
}
